import ws from 'k6/ws';
import { check, sleep } from 'k6';
import { Rate, Trend } from 'k6/metrics';

// 📊 메트릭
const connectionSuccessRate = new Rate('ws_connection_success');
const messageSuccessRate = new Rate('ws_message_success');
const messageLatency = new Trend('ws_message_latency');
const messageDeliveryTime = new Trend('ws_message_delivery_time');

// 🧪 부하 옵션
export const options = {
  stages: [
    { duration: '1m', target: 50 },  // 램프업
    { duration: '3m', target: 50 },  // 유지
    { duration: '1m', target: 0 },   // 램프다운
  ],
  thresholds: {
    'ws_connection_success': ['rate>0.95'],
    'ws_message_success': ['rate>0.95'],
    'ws_message_latency': ['p(95)<1000'],
    'ws_message_delivery_time': ['p(95)<2000'],
  },
};

// 🧬 테스트 대상
const JWT = 'Bearer test-token';  // 테스트용 토큰
const CHANNELS = ['channel-1', 'channel-2', 'channel-3', 'channel-4', 'channel-5'];
const MESSAGES = [
  '5fEHXeUTPvcRi4KsQegy', 'BwsgoerKnKwSssYQOK2q', 'GrqlWk07Ns2oL4TegScH',
  'xz0YIa18kE7OC4isR2my', 'FvCwezt18V73D9BR5j6p', 'lI5XfAvL3He3kIS9RpOh',
  'szLUP7xJGo4aXWjliq1c', '7kUoeMFlO2qLabZaCi1s', '88a1yW1h3zsK1bcPcj9G', 'RGUOsxDJNjtkkcawE5XD'
];

const random = (arr) => arr[Math.floor(Math.random() * arr.length)];

export default function () {
  const channelId = random(CHANNELS);
  const messageText = random(MESSAGES);
  const url = 'ws://localhost:8081/ws';
  let messageSent = false;
  let messageReceived = false;
  let startTime = 0;
  let isSubscribed = false;
  let subscriptionTimeout = null;

  const res = ws.connect(url, (socket) => {
    socket.on('open', () => {
      console.log(`🔗 연결됨 → ${channelId}`);
      connectionSuccessRate.add(1);
      
      // STOMP CONNECT 프레임 전송
      const connectFrame = `CONNECT\naccept-version:1.1\nheart-beat:0,0\nAuthorization:${JWT}\n\n\0`;
      console.log('📤 STOMP CONNECT 프레임 전송:', connectFrame);
      socket.send(connectFrame);
    });

    socket.on('message', (data) => {
      console.log('📥 수신된 메시지:', data);
      
      if (data.includes('CONNECTED')) {
        console.log('✅ STOMP 연결 성공');
        const subscribeFrame = `SUBSCRIBE\nid:sub-0\ndestination:/topic/chat.channel.${channelId}\n\n\0`;
        console.log('📤 SUBSCRIBE 프레임 전송:', subscribeFrame);
        socket.send(subscribeFrame);
        isSubscribed = true;

        // 구독 타임아웃 설정
        subscriptionTimeout = setTimeout(() => {
          if (!messageSent) {
            console.error('❌ 구독 타임아웃');
            socket.close();
          }
        }, 5000);

        // 메시지 전송 전에 약간의 지연을 주어 구독이 완료되도록 함
        setTimeout(() => {
          if (isSubscribed) {
            startTime = Date.now();
            const messageBody = JSON.stringify({
              serverId: "test-server",
              email: "test@example.com",
              writer: "test-user",
              content: messageText,
              messageType: "TALK",
              fileUrl: null,
              fileName: null
            });
            
            const payload = `SEND\ndestination:/pub/chat.message.${channelId}\ncontent-type:application/json\ncontent-length:${messageBody.length}\nAuthorization:${JWT}\n\n${messageBody}\0`;
            
            console.log('📤 SEND 프레임 전송:', payload);
            socket.send(payload);
            messageSent = true;
            messageLatency.add(Date.now() - startTime);
            console.log(`📤 전송 (${channelId}): ${messageText}`);
          }
        }, 2000);
      }

      // MESSAGE 프레임 수신 처리
      if (data.includes('MESSAGE')) {
        const messageTime = Date.now() - startTime;
        messageDeliveryTime.add(messageTime);
        
        console.log('📥 MESSAGE 프레임 수신:', data);
        
        // 메시지 본문에서 content 필드 확인
        try {
          const messageContent = data.split('\n\n')[1];
          const messageJson = JSON.parse(messageContent);
          
          if (messageJson.content === messageText) {
            messageSuccessRate.add(1);
            messageReceived = true;
            console.log(`✅ 메시지 수신 성공 (${messageTime}ms): ${messageText}`);
            
            // 메시지 수신 후 연결 종료
            setTimeout(() => {
              const disconnectFrame = 'DISCONNECT\n\n\0';
              console.log('📤 DISCONNECT 프레임 전송:', disconnectFrame);
              socket.send(disconnectFrame);
              socket.close();
            }, 1000);
          } else {
            console.log('⚠️ 다른 메시지 수신:', messageJson.content);
          }
        } catch (e) {
          console.error('❌ 메시지 파싱 실패:', e);
        }
      }

      if (data.includes('ERROR')) {
        connectionSuccessRate.add(0);
        messageSuccessRate.add(0);
        console.error('❌ 에러:', data);
        socket.close();
      }
    });

    socket.on('close', () => {
      if (subscriptionTimeout) {
        clearTimeout(subscriptionTimeout);
      }
      
      if (!messageReceived && messageSent) {
        messageSuccessRate.add(0);
        console.log('❌ 메시지 수신 실패');
      }
      console.log('🔌 연결 종료');
    });

    socket.on('error', (e) => {
      if (subscriptionTimeout) {
        clearTimeout(subscriptionTimeout);
      }
      
      console.error('❗ 연결 실패:', e);
      connectionSuccessRate.add(0);
      messageSuccessRate.add(0);
    });
  });

  check(res, { '✅ 연결 성공': (r) => r && r.status === 101 });
  sleep(5); // 각 VU가 5초 동안 유지
}
